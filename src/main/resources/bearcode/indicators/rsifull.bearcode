/*
 * Copyright (C) 2019 Lucas Meyer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//                  100
//    RSI = 100 - --------
//                 1 + RS
//
//    RS = Average Gain / Average Loss
//
//  (1) First Average Gain = Sum of Gains over the past 14 periods / 14
//  (1) First Average Loss = Sum of Losses over the past 14 periods / 14
//
//  (>1) Other Average Gain = [(previous Average Gain) x 13 + current Gain] / 14
//  (>1) Average Loss = [(previous Average Loss) x 13 + current Loss] / 14
//
//This RSI calculation is based on 14 periods, which is the default suggested by Wilder in his book. Losses are expressed as positive values, not negative values.
//
// Close_t - Close_tm1 = Gain if > 0 
// Close_t - Close_tm1 = Loss if < 0

//candles OpenStock
var candlesinput = candles;

//parametrosinput
var periodoinput = parseInt(period);

//receber valores de close e timestamp
var closes_timestamps = retornarclosestimestamp();
var closes = closes_timestamps[0];
var timestamps = closes_timestamps[1];

//receber gainslosses
var gainlosses_timestamps = retornargainlosses(closes,timestamps);

//receber average gainlosses
var avegains_avelosses_timestamps = retornaraveragegainlosses(gainlosses_timestamps[0],gainlosses_timestamps[1],periodoinput);

//receber RSs
var rss_timestamps = retornarrs(avegains_avelosses_timestamps[0],avegains_avelosses_timestamps[1],avegains_avelosses_timestamps[2]);
//runoutput.print(rss_timestamps);

//receber RSIs
var rsis_timestamps = retornarrsis(rss_timestamps[0],rss_timestamps[1]);
//runoutput.print(rsis_timestamps);

//funcao para retornar valores de close das candles
function retornarclosestimestamp()
{
    var valoresclose = [];
    var timestampsclose = [];

    for (i = 0; i < candlesinput.length; i++)
    {
        valoresclose.push(candlesinput[i].closed);
        //runoutput.print(candlesinput[i].closed);
        timestampsclose.push(candlesinput[i].timestampdate);
        //runoutput.print(candlesinput[i].timestampdate);
    }

    var retornoclose = [];
    retornoclose.push(valoresclose);
    retornoclose.push(timestampsclose);
    //runoutput.print("retornoclose: " + retornoclose[1]);

    return retornoclose;
}

function retornargainlosses(closes,timestamps)
{
    //funcao para retornar vetor com gains e losses (Close_t - Close_tm1)
    
    var gainslosses = []
    var timestampsgl = []
    
    for (i = 0; i < closes.length; i++)
    {
        if (i == 0)
        {
            //nao existe gain loss sem periodo anterior
            var glatual = 0.0;
            gainslosses.push(glatual);
            timestampsgl.push(timestamps[i]);
        }
        else if (i > 0)
        {
            var glatual = closes[i] - closes[i - 1];
            gainslosses.push(glatual);
            timestampsgl.push(timestamps[i]);
        }
    }

    var retornogl = [];
    retornogl.push(gainslosses);
    retornogl.push(timestampsgl);

    return retornogl;
}

function retornaraveragegainlosses(gainlosses,timestamps,periodo)
{
    var avegains = [];
    var avelosses = [];
    var timestampsavegl = [];

    var tamanhoavegainlosses = gainlosses.length - periodo;
    //exemplo periodo 14 e 33 candles, entao 33 gainlosses (sendo o primeiro gain loss 0)
    //14=0 ate 14<(19+14)
    for (i = periodo; i < (periodo+tamanhoavegainlosses); i++)
    {
        if (i == periodo)
        {
            //o primeiro average eh media simples
            var somagains = 0.0;
            var somalosses = 0.0;

            for (j = 0; j < periodo; j++)
            {
                var indiceatual = i-periodo+j;
                
                var glatual = gainlosses[indiceatual];
                
                if (glatual >= 0)
                {
                    somagains = somagains + glatual;
                }
                else if (glatual < 0)
                {
                    somalosses = somalosses + (-1*glatual);
                }
            }
            var avegainatual = somagains/periodo;
            //runoutput.print("avegainatual["+i+"]: " + avegainatual + " ");
            var avelossatual = somalosses/periodo;
            //runoutput.print("avelossatual["+i+"]: " + avelossatual + " ");
            var timestampatual = timestamps[i];
            //runoutput.print("timestampatual["+i+"]: " + timestampatual + "\n");

            avegains.push(avegainatual);
            avelosses.push(avelossatual);
            timestampsavegl.push(timestampatual);
        }
        else if (i > periodo)
        {
            //os proximos sao averages moveis
            var gainatual = 0.0;
            var lossatual = 0.0;
            if (gainlosses[i] >= 0)
            {
                gainatual = gainatual + gainlosses[i];
            }
            else if (gainlosses[i] < 0)
            {
                lossatual = lossatual + (-1*gainlosses[i]);
            }

            var avegainanterior = avegains[i-periodo-1];
            //runoutput.print("avegainanterior["+i+"]: " + avegainanterior + " ");
            
            var avelossanterior = avelosses[i-periodo-1];
            //runoutput.print("avelossanterior["+i+"]: " + avelossanterior + " ");

            var avegainatual = ((avegainanterior*(periodo-1)) + gainatual)/periodo;
            //runoutput.print("avegaintual["+i+"]: " + avegainatual + " ");
            var avelossatual = ((avelossanterior*(periodo-1)) + lossatual)/periodo;
            //runoutput.print("avelossatual["+i+"]: " + avelossatual + " ");

            var timestampatual = timestamps[i];
            //runoutput.print("timestampatual["+i+"]: " + timestampatual + "\n");

            avegains.push(avegainatual);
            avelosses.push(avelossatual);
            timestampsavegl.push(timestampatual);
        }
    }

    var retornoavegl = [];
    retornoavegl.push(avegains);
    retornoavegl.push(avelosses);
    retornoavegl.push(timestampsavegl);

    return retornoavegl;
}

function retornarrs(avegains,avelosses,timestamps)
{
    var rss = [];
    var timestampsrss = [];

    for (i = 0; i < avegains.length; i++)
    {
        var rsatual = avegains[i] / avelosses[i];
        var timestampatual = timestamps[i];

        rss.push(rsatual);
        timestampsrss.push(timestampatual);
    }

    var retornorss = [];
    retornorss.push(rss);
    retornorss.push(timestampsrss);

    return retornorss;
}

function retornarrsis(rss,timestamps)
{
    var rsis = [];
    var timestampsrsis = [];

    for (i = 0; i < rss.length; i++)
    {
        var rsiatual = 100 - (100/(1+rss[i]));
        var timestampatual = timestamps[i];

        rsis.push(rsiatual);
        timestampsrsis.push(timestamps[i]);
    }

    var retornorsis = [];
    retornorsis.push(rsis);
    retornorsis.push(timestampsrsis);

    return retornorsis;
}

var scriptdescription = "RSI ("+periodoinput+");drawseparateline"; 
var yvalues = Java.to(rsis_timestamps[0],"double[]");
var xvalues = Java.to(rsis_timestamps[1],"java.util.Date[]");
