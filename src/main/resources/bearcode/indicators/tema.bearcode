/*
 * Copyright (C) 2019 Lucas Meyer
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//TEMA =    3*EMA(n) -      3*EMA(EMA(n)) +         EMA(EMA(EMA(n)))
//          ts-periodo      ts-periodo-periodo      ts-periodo-periodo-periodo        (diferenca de quantidade de timestamps)

//candles OpenStock
var candlesinput = candles;

//parametrosinput
var periodoinput = parseInt(period);

//receber valores de close e timestamp
var closes_timestamps = retornarclosestimestamp();
var closes = closes_timestamps[0];
var timestamps = closes_timestamps[1];

//calcular ema_periodo
var ema_periodo = calculate_ema(periodoinput,closes,timestamps);
//var tema_periodo = ema_periodo;

//calcular ema(ema_periodo)
var ema_ema_periodo = calculate_ema(periodoinput,ema_periodo[0],ema_periodo[1]);
//var tema_periodo = ema_ema_periodo;

//calcular ema(ema(ema_periodo))
var ema_ema_ema_periodo = calculate_ema(periodoinput,ema_ema_periodo[0],ema_ema_periodo[1]);
//var tema_periodo = ema_ema_ema_periodo;

//calcular 3 * ema(ema_periodo)
var triple_ema_ema_periodo = calculate_timesx(3.0,ema_ema_periodo[0],ema_ema_periodo[1]);
//var tema_periodo = triple_ema_ema_periodo;

//calcular 3 * ema_periodo
var triple_ema_periodo = calculate_timesx(3.0,ema_periodo[0],ema_periodo[1]);
//var tema_periodo = triple_ema_periodo;

//calcular (3 * ema_periodo) -  (3 * ema(ema_periodo))
var diff_tema = calculate_difference_tema(triple_ema_periodo[0],triple_ema_ema_periodo[0],triple_ema_periodo[1],triple_ema_ema_periodo[1],periodoinput);
//var tema_periodo = diff_tema;

//calcular valor final tema
var tema_periodo = calculate_sum_tema(diff_tema[0],ema_ema_ema_periodo[0],diff_tema[1],ema_ema_ema_periodo[1],periodoinput);
var tema_periodo = tema_periodo;


//funcao para retornar valores de close das candles
function retornarclosestimestamp()
{
    var valoresclose = [];
    var timestampsclose = [];

    for (i = 0; i < candlesinput.length; i++)
    {
        valoresclose.push(candlesinput[i].closed);
        //runoutput.print(candlesinput[i].closed);
        timestampsclose.push(candlesinput[i].timestampdate);
        //runoutput.print(candlesinput[i].timestampdate);
    }

    var retornoclose = [];
    retornoclose.push(valoresclose);
    retornoclose.push(timestampsclose);
    //runoutput.print("retornoclose: " + retornoclose[1]);

    return retornoclose;
}


//funcao para calcular EMA
function calculate_ema(periodo,valoresx,valorestimestamp)
{
    var valormultiplierema = (2.0/(periodo+1.0));

    var valoresema = [];
    var timestampsema = [];

    for (i = periodo; i < valoresx.length; i++)
    {
        if (i == periodo)
        {
            var somaatual = 0;
            for (j = 0; j < periodo; j++)
            {
                var indiceatual = i-periodo+j;
                somaatual = somaatual + valoresx[indiceatual];
            }
            var emaatual = somaatual/periodo;
            var timestampatual = valorestimestamp[i];
            valoresema.push(emaatual);
            timestampsema.push(timestampatual);
        }
        else if (i > periodo)
        {
            var emaanterior = valoresema[i-periodo-1];
            var closingatual = valoresx[i];

            var emaatual = (closingatual-emaanterior)*valormultiplierema + emaanterior;
            var timestampatual = valorestimestamp[i];

            valoresema.push(emaatual);
            timestampsema.push(timestampatual);
        }
    }

    var retornoema = [];
    retornoema.push(valoresema);
    retornoema.push(timestampsema);    
    
    return retornoema;
}


function calculate_difference_tema
(
	valores_triple_ema,
	valores_triple_ema_ema,
	timestamps_triple_ema,
	timestamps_triple_ema_ema,
	periodo
)
{
    var valoresdiff = [];
    var timestampsdiff = [];

	for (i = periodo; i < valores_triple_ema.length; i++)
	{
		var diff = valores_triple_ema[i] - valores_triple_ema_ema[i-periodo];
		var timestamp = timestamps_triple_ema[i];
		
		valoresdiff.push(diff);
		timestampsdiff.push(timestamp);
	}
	
	var retornodiff = [];
    retornodiff.push(valoresdiff);
    retornodiff.push(timestampsdiff);

    return retornodiff;
	
}

function calculate_sum_tema
(
	valores_diff_ema,
	valores_ema_ema_ema,
	timestamps_diff_ema,
	timestamps_ema_ema_ema,
	periodo
)
{
    var valoressum = [];
    var timestampssum = [];

	for (i = periodo; i < valores_diff_ema.length; i++)
	{
		var sum = valores_diff_ema[i] + valores_ema_ema_ema[i-periodo];
		var timestamp = timestamps_diff_ema[i];
		
		valoressum.push(sum);
		timestampssum.push(timestamp);
	}
	
	var retornodiff = [];
    retornodiff.push(valoressum);
    retornodiff.push(timestampssum);

    return retornodiff;
	
}


function calculate_timesx(xtimes,valores_a,timestamps_a)
{
	var valoresdouble = [];
	var timestampsdouble = [];
	
	for (i = 0; i < valores_a.length; i++)
	{
		var doubleatual = xtimes*valores_a[i];
		var timestampatual = timestamps_a[i];
		
		valoresdouble.push(doubleatual);
		timestampsdouble.push(timestampatual);
	}
	
	var retornodouble = [];
	retornodouble.push(valoresdouble);
	retornodouble.push(timestampsdouble);
	
	return retornodouble;
}


var scriptdescription = "TEMA ("+periodoinput+");drawoncandles"; 
var yvalues = Java.to(tema_periodo[0],"double[]");
var xvalues = Java.to(tema_periodo[1],"java.util.Date[]");
